{"version":3,"sources":["views/widgets/Widget05.js","views/HelpCentre.js"],"names":["Widget05","PropTypes","node","string","object","func","this","props","className","children","cssModule","dataBox","data","variant","title","indexOf","back","vals","Object","keys","values","classNames","mapToCssModules","style","backgroundColor","color","height","display","justifyContent","xs","onClick","onGreenPress","onRedPress","Component","defaultProps","friends","feeds","Schema","Yup","shape","name","required","email","problem","HelpCentre","state","success","failure","isMobile","initialValues","onSubmit","a","setState","master","submitForm","ok","validationSchema","render","handleChange","touched","handleBlur","handleSubmit","errors","handleReset","isValid","isSubmitting","id","paddingLeft","width","undefined","fontSize","for","type","placeholder","onChange","onBlur","value","invalid","size"],"mappings":"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","file":"static/js/14.f9b18d2c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport { mapToCssModules } from 'reactstrap/lib/utils';\nimport { Button, Row, Col, Card, CardBody } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cssModule: PropTypes.object,\n  dataBox: PropTypes.func,\n};\n\nconst defaultProps = {\n  dataBox: () => ({ variant: 'facebook', friends: '-', feeds: '-' }),\n};\n\nclass Widget05 extends Component {\n\n  // constructor(props){\n  //   super(props)\n  // }\n\n  render() {\n\n    // eslint-disable-next-line\n    const { children, className, cssModule, dataBox, ...attributes } = this.props;\n\n    // demo purposes only\n    const data = dataBox();\n    const variant = data.variant;\n    const title = data.title;\n    if (!variant || ['facebook', 'twitter', 'linkedin', 'google-plus'].indexOf(variant) < 0) {\n      return (null);\n    }\n\n    const back = 'bg-' + variant;\n    const icon = 'fa fa-' + variant;\n    const keys = Object.keys(data);\n    const vals = Object.values(data);\n\n    const classCard = 'brand-card';\n    const classCardHeader = classNames(`${classCard}-header`, back);\n    const classCardBody = classNames(`${classCard}-body`);\n    const classes = mapToCssModules(classNames(classCard, className), cssModule);\n\n    return (\n          <Card style={{backgroundColor:'#272A3D', color:'white'}}>\n              <CardBody >\n                <Row style={{height: '70px'}}>\n                    <Col style={{display: 'flex', justifyContent: 'center'}}>\n                    {data.title}\n                    </Col>\n                    \n                </Row>\n\n                {vals[3] != \"\" ?\n                    <Row>   \n                        <Col xs=\"6\" style={{justifyContent:'center', display:'flex' }}>\n                          <Button onClick={this.props.onGreenPress} color=\"success\">{vals[2]}</Button>\n                        </Col>\n                        <Col xs=\"6\" style={{justifyContent:'center', display:'flex' }}>\n                            <Button onClick={this.props.onRedPress} color=\"danger\">{vals[3]}</Button>\n                        </Col>\n                    </Row>\n                :\n                <Row>   \n                        <Col xs=\"12\" style={{justifyContent:'center', display:'flex' }}>\n                            <Button onClick={this.props.onGreenPress} color=\"success\">{vals[2]}</Button>\n                        </Col>\n                    </Row>                  \n                }\n            </CardBody>\n          </Card>\n\n    );\n  }\n}\n\nWidget05.defaultProps = defaultProps;\n\nexport default Widget05;\n","import React, { Component } from 'react';\nimport { Button, Modal, ModalBody, ModalFooter, Input, ModalHeader, Badge, Line, Card, CardBody, CardHeader, Col, Pagination, PaginationItem, PaginationLink, Row, Table, Form, FormGroup, Label, FormText, FormFeedback, Alert } from 'reactstrap';\nimport Widget05 from './widgets/Widget05';\n\nimport master from \"../api/master\"\nimport { Formik } from 'formik'\nimport * as Yup from 'yup';\n\n\n\n\nconst Schema = Yup.object().shape({\n  name: Yup.string()\n    .required('Name is required'),\n  email: Yup.string()\n    .email(\"Invalid Email\")\n    .required('Email is required'),\n  problem: Yup.string()\n    .required('Required'),\n\n});\n\n\nclass HelpCentre extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      success: false,\n      failure: false,\n      isMobile: props.isMobile,\n\n\n    }\n  }\n\n\n  render() {\n    const { isMobile } = this.props;\n\n    return (\n      <Formik\n        initialValues={{ email: '', name: '', problem: '' }}\n        onSubmit={async (values) => {\n          this.setState({ success: false, failure: false })\n          try {\n            const response = await master.submitForm(values)\n            if (response.ok) {\n              this.setState({ success: true })\n\n            }\n            else {\n              this.setState({ failure: true })\n\n            }\n          } catch (err) {\n\n            this.setState({ failure: true })\n\n          }\n        }}\n        validationSchema={Schema}\n        render={({\n          values,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset,\n          errors,\n          isValid,\n          isSubmitting\n        }) => {\n\n          const { success, failure } = this.state\n\n          return (\n            <div id='main' style={{\n              ...{\n                paddingLeft: \"18%\",\n                width: \"100%\",\n                backgroundColor: \"#1E1E26\",\n              },\n              ...(isMobile && { paddingLeft: undefined }),\n            }}\n              className=\"animated fadeIn w3-container\">\n              {success && <Alert color=\"success\">\n                Success! An Elabox Support representative will reach out to you shortly.\n                </Alert>}\n              {failure && <Alert color=\"danger\">\n                Please check your network connection\n            </Alert>}\n              <Row >\n                <Col>\n                  <Card style={{ backgroundColor: '#272A3D', color: 'white', fontSize: '16px' }}>\n                    <CardHeader><center>Need Help or Assistance?</center></CardHeader>\n                    <CardBody>\n                      <center>Fill in the details below the Elabox Support Team will reach out to you as soon as possible.</center>\n                      <br />\n                      <Form>\n                        <Row><Col>\n                          <FormGroup>\n                            <Label for=\"name\">Full Name</Label>\n                            <Input type=\"text\" name=\"name\" id=\"name\" placeholder=\"John Doe\" onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.name}\n                              invalid={errors.name ? true : false}\n                            />\n                            {(errors.problem ? true : false) && <FormFeedback>{errors.problem}</FormFeedback>\n                            }\n\n                          </FormGroup>\n                        </Col>\n                          <Col>\n                            <FormGroup>\n                              <Label for=\"email\">Email</Label>\n                              <Input type=\"email\" name=\"email\" id=\"email\" placeholder=\"john@doe.com\"\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                value={values.email}\n                                invalid={errors.email ? true : false}\n\n\n                              />\n                              {(errors.email ? true : false) && <FormFeedback>{errors.email}</FormFeedback>\n                              }\n                            </FormGroup>\n                          </Col>\n                        </Row>\n                        <Row><Col>\n                          <FormGroup>\n                            <Label for=\"problem\">Problem</Label>\n                            <Input type=\"textarea\" name=\"problem\" id=\"problem\" placeholder=\"Describe your problem\"\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.problem}\n                              invalid={errors.problem ? true : false}\n\n                            />\n                            {(errors.problem ? true : false) && <FormFeedback>{errors.problem}</FormFeedback>\n                            }\n                          </FormGroup>\n                        </Col></Row>\n                        <Row>\n                          <Col>\n                            <Button color=\"primary\" size=\"lg\" type=\"submit\" onClick={handleSubmit}>Submit</Button>\n                          </Col>\n\n                        </Row>\n\n                      </Form>\n                    </CardBody>\n\n                  </Card>\n                </Col>\n              </Row>\n            </div>\n\n          )\n        }} />\n\n\n\n    );\n  }\n}\n\nexport default HelpCentre;"],"sourceRoot":""}