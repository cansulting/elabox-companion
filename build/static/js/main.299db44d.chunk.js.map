{"version":3,"sources":["api/backend.js","api/master.js","App.js","serviceWorker.js","index.js"],"names":["PUBLIC_URI","window","location","hostname","login","pwd","fetch","method","headers","Accept","body","JSON","stringify","then","response","json","checkInstallation","createWallet","latestBlock","blockSizes","serviceStatus","nbOfTx","restartAllServices","restartMainChain","restartDid","restartCarrier","getBalance","address","sendTx","recipient","amount","txHistory","console","log","getVersion","axios","get","getOnion","regenerateOnion","checkUpdate","Promise","resolve","reject","a","data","updateNow","submitForm","post","this","create","baseURL","loading","className","Auth","React","lazy","Config","Download","PrivateRoute","children","rest","isConfiged","localStorage","getItem","render","to","pathname","state","from","App","props","backend","responseJson","setItem","configed","trim","setState","e","error","Suspense","fallback","path","style","wordWrap","whiteSpace","ok","component","Component","Boolean","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.299db44d.chunk.js","sourcesContent":["import axios from \"axios\"\nconst PUBLIC_URI = window.location.hostname + \":3001\"\nclass API {\n    login = (pwd) => {\n        return fetch(`http://${PUBLIC_URI}/login`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                pwd,\n            }),\n        }).then((response) => response.json());\n    };\n\n    checkInstallation = () => {\n        return fetch(`http://${PUBLIC_URI}/checkInstallation`).then((response) =>\n            response.json()\n        );\n    };\n\n    createWallet = (pwd) => {\n        return fetch(`http://${PUBLIC_URI}/createWallet`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                pwd,\n            }),\n        }).then((response) => response.json());\n    };\n\n    latestBlock = () => {\n        return fetch(`http://${PUBLIC_URI}/latestblock`).then((response) =>\n            response.json()\n        );\n    };\n\n    blockSizes = () => {\n        return fetch(`http://${PUBLIC_URI}/blocksizes`).then((response) =>\n            response.json()\n        );\n    };\n\n    serviceStatus = () => {\n        return fetch(`http://${PUBLIC_URI}/serviceStatus`).then((response) =>\n            response.json()\n        );\n    };\n\n    nbOfTx = () => {\n        return fetch(`http://${PUBLIC_URI}/nbOfTx`).then((response) => response.json());\n    };\n\n\n    restartAllServices = (pwd) => {\n        return fetch(`http://${PUBLIC_URI}/restartAll`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                pwd: pwd,\n            }),\n        }).then((response) => response.json());\n    };\n\n    restartMainChain = (pwd) => {\n        return fetch(`http://${PUBLIC_URI}/restartMainchain`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                pwd: pwd,\n            }),\n        }).then((response) => response.json());\n    };\n\n\n    restartDid = () => {\n        return fetch(`http://${PUBLIC_URI}/restartDid`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n\n        })\n            .then(response => response.json())\n    };\n\n\n    restartCarrier = () => {\n        return fetch(`http://${PUBLIC_URI}/restartCarrier`, {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            }\n        })\n            .then(response => response.json())\n    };\n\n\n    getBalance = (address) => {\n        return fetch(`http://${PUBLIC_URI}/getBalance`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                address,\n            }),\n        }).then((response) => response.json());\n    };\n\n    sendTx = (recipient, amount, pwd) => {\n        return fetch(`http://${PUBLIC_URI}/sendTx`, {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                recipient: recipient,\n                amount: amount,\n                pwd: pwd,\n            }),\n        }).then((response) => response.json());\n    };\n\n    txHistory = (address) => {\n        console.log(\"https://node1.elaphant.app/api/3/history/\" + address + \"?pageNum=1&pageSize=10&order=desc\")\n\n        return fetch(\n            \"https://node1.elaphant.app/api/3/history/\" +\n            address +\n            \"?pageNum=1&pageSize=10&order=desc\"\n        ).then((response) => response.json());\n    };\n\n    getVersion = () => {\n        return axios.get(`http://${PUBLIC_URI}/getVersion`)\n    }\n\n    getOnion = () => {\n        return axios.get(`http://${PUBLIC_URI}/getOnion`)\n    }\n\n    regenerateOnion = () => {\n        return axios.get(`http://${PUBLIC_URI}/regenerateOnion`)\n    }\n}\n\nexport default new API();","import axios from \"axios\";\r\n\r\nclass API {\r\n  constructor() {\r\n    this.axios = axios.create({\r\n      baseURL: \"http://\" + window.location.hostname + \":3002\",\r\n    });\r\n  }\r\n\r\n  checkUpdate = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const response = await this.axios.get(\"/checkUpdate\");\r\n        return resolve(response.data);\r\n      } catch (error) {\r\n        return reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  updateNow = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const response = await this.axios.get(\"/updateNow\");\r\n        return resolve(response.data);\r\n      } catch (error) {\r\n        return reject(error);\r\n      }\r\n    });\r\n  };\r\n\r\n  submitForm = (data) => {\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const response = await this.axios.post(\"/sendSupportEmail\", data);\r\n        return resolve(response.data);\r\n      } catch (error) {\r\n        return reject(error);\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport default new API();\r\n","import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n\nimport master from \"./api/master\"\nimport backend from \"./api/backend\"\n\nconst loading = () => (\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\n);\nconst Auth = React.lazy(() => import(\"./views/Auth\"));\nconst Config = React.lazy(() => import(\"./views/Config\"));\nconst Download = React.lazy(() => import(\"./views/Download\"));\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    try {\n      backend.checkInstallation()\n        .then((responseJson) => {\n          localStorage.setItem(\"isconfiged\", responseJson.configed.trim());\n          this.setState({ loading: false });\n        });\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  state = {\n    loading: true,\n  };\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <Router>\n          <div>\n            <React.Suspense fallback={loading()}>\n              <Switch>\n                <Route path=\"/check\">\n                  <pre\n                    style={{ wordWrap: \"break-word\", whiteSpace: \"pre-wrap\" }}\n                  >\n                    {JSON.stringify({ ok: true })}\n                  </pre>\n                </Route>\n                <Route path=\"/\" component={loading} />\n              </Switch>\n            </React.Suspense>\n          </div>\n        </Router>\n      );\n    } else {\n      return (\n        <Router>\n          <div>\n            <React.Suspense fallback={loading()}>\n              <Switch>\n                <Route path=\"/config\">\n                  <Config />\n                </Route>\n                <Route path=\"/download\">\n                  <Download />\n                </Route>\n                <Route path=\"/check\">\n                  <pre\n                    style={{ wordWrap: \"break-word\", whiteSpace: \"pre-wrap\" }}\n                  >\n                    {JSON.stringify({ ok: true })}\n                  </pre>\n                </Route>\n                <PrivateRoute path=\"/\">\n                  <Auth />\n                </PrivateRoute>\n              </Switch>\n            </React.Suspense>\n          </div>\n        </Router>\n      );\n    }\n  }\n}\n\n// A wrapper for <Route> that redirects to the login\n// screen if you're not yet authenticated.\nfunction PrivateRoute({ children, ...rest }) {\n  const isConfiged = localStorage.getItem(\"isconfiged\");\n  console.log(localStorage);\n  console.log(isConfiged);\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        isConfiged == \"true\" ? (\n          children\n        ) : (\n            <Redirect\n              to={{\n                pathname: \"/config\",\n                state: { from: location },\n              }}\n            />\n          )\n      }\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './w3.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}